name: auto_release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl

    steps:
      - uses: actions/checkout@v4

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install musl tools
        run: |
          sudo apt-get update
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
            sudo apt-get install -y musl-tools gcc-aarch64-linux-gnu
          elif [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
            sudo apt-get install -y musl-tools
          fi

      - name: Build
        run: |
          set -euxo pipefail
          rustc -V
          cargo -V
          cargo build --release --target ${{ matrix.target }}

      - name: Rename binary
        run: |
          case "${{ matrix.target }}" in
            x86_64-unknown-linux-musl)
              mv target/${{ matrix.target }}/release/nat natx86
              ;;
            aarch64-unknown-linux-musl)
              mv target/${{ matrix.target }}/release/nat natarm64
              ;;
          esac

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            natx86
            natarm64

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: release_bins

      - name: GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          version="1.0.0"
          if gh release delete v${version} -y --cleanup-tag; then
            echo "Deleted old release v${version}"
          else
            echo "No old release to delete"
          fi

          # 直接发布 natx86 和 natarm64
          gh release create v${version} release_bins/**/nat* \
            -n "$version" -t "$version" --latest
