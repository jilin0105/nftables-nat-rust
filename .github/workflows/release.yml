name: auto_release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl

    steps:
      - uses: actions/checkout@v4

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install musl tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Setup cargo config for musl
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml <<EOF
          [target.x86_64-unknown-linux-musl]
          linker = "x86_64-linux-musl-gcc"

          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-musl-gcc"
          EOF

      - name: Build static binary
        run: |
          set -euxo pipefail
          rustc -V
          cargo -V
          cargo build --release --target ${{ matrix.target }}

      - name: Rename binary
        run: |
          BIN_NAME="nat"
          OUT_NAME="nat-${{ matrix.target }}"
          mv target/${{ matrix.target }}/release/$BIN_NAME $OUT_NAME

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: nat-${{ matrix.target }}

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: release_bins

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          version="1.0.0"
          # 删除旧 release（如果存在）
          if gh release delete v${version} -y --cleanup-tag; then
            echo "Deleted old release v${version}"
          else
            echo "No old release to delete"
          fi
          git config --local user.email "admin@arloor.com"
          git config --local user.name "arloor"
          # 上传静态编译的二进制
          gh release create v${version} release_bins/nat-* -n "$version" -t "$version" --latest
