name: auto_release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-gnueabihf
          - arm-unknown-linux-gnueabihf
    steps:
      - uses: actions/checkout@v4

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install cross compiler
        run: |
          sudo apt-get update
          case "${{ matrix.target }}" in
            aarch64-unknown-linux-gnu)
              sudo apt-get install -y gcc-aarch64-linux-gnu
              ;;
            armv7-unknown-linux-gnueabihf|arm-unknown-linux-gnueabihf)
              sudo apt-get install -y gcc-arm-linux-gnueabihf
              ;;
          esac

      - name: Setup cross linker
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"

          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"

          [target.arm-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          EOF

      - name: Build
        run: |
          set -euxo pipefail
          rustc -V
          cargo -V
          cargo build --release --target ${{ matrix.target }} -v

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nat-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/nat

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: release_bins

      - name: GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          version="1.0.0"
          if gh release delete v${version} -y --cleanup-tag; then
            echo "delete old release"
          else
            echo "no old release"
          fi
          git config --local user.email "admin@arloor.com"
          git config --local user.name "arloor"
          gh release create v${version} release_bins/**/nat -n "$version" -t "$version" --latest
