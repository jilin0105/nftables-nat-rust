name: auto_release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            bin_name: natx86
          - target: aarch64-unknown-linux-musl
            bin_name: natarm64

    outputs:
      version: ${{ steps.vars.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Set outputs
        id: vars
        run: |
          version=$(grep '^version =' Cargo.toml | head -n 1 | cut -d '"' -f2)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build with cross
        run: cross build --release --target ${{ matrix.target }}

      - name: Rename binary
        run: mv target/${{ matrix.target }}/release/nat ${{ matrix.bin_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.bin_name }}
          path: ${{ matrix.bin_name }}

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: release_bins

      - name: GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          version="${{ needs.build.outputs.version }}"
          echo "Releasing version $version"

          if gh release delete v${version} -y --cleanup-tag --target master; then
            echo "Deleted old release v${version}"
          else
            echo "No old release to delete"
          fi

          gh release create v${version} release_bins/**/nat* \
            -n "$version" -t "$version" --latest --target master
